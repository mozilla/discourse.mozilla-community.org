version: 0.2

phases:
  install:
    runtime-versions:
        ruby: 2.6
    commands:
      - aws eks update-kubeconfig --name $CLUSTER
      - aws ecr get-login --region us-west-2 --no-include-email | bash
      - wget -q https://get.helm.sh/helm-v2.14.3-linux-amd64.tar.gz
      - wget -q https://get.helm.sh/helm-v2.14.3-linux-amd64.tar.gz.sha256
      - if [[ "$(cat helm-v2.14.3-linux-amd64.tar.gz.sha256)" != "$(sha256sum helm-v2.14.3-linux-amd64.tar.gz | awk '{print $1}')" ]] ; then echo "There was a problem downloading Helm && exit 1" ; fi
      - tar xvf helm-v2.14.3-linux-amd64.tar.gz

  pre_build:
    commands:
      - git clone -q --depth 1 https://github.com/discourse/discourse_docker.git
      - cd discourse_docker
      - mkdir -p includes && mkdir -p containers
      - mv ../discourse-$ENV.yml containers/app.yml
      - mv ../includes/* includes/

      - sed -i "s/db-host/$DB_HOST/" includes/env.yml
      - sed -i "s/auth0-client-id/$AUTH0_CLIENT/" includes/env.yml
      - sed -i "s/auth0-client-secret/$AUTH0_SECRET/" includes/env.yml
      - sed -i "s,auth0-callback-url,$AUTH0_CALLBACK_URL," includes/env.yml
      - sed -i "s/redis-host/$REDIS_HOST/" includes/env.yml
      - sed -i "s/my-non-real-password/$DB_PWD/" includes/env.yml
      - sed -i "s/discourse-hostname/$D_HOSTNAME/" includes/env.yml
      - sed -i "s/smtp-username/$SMTP_USER/" includes/env.yml
      - sed -i "s/smtp-password/$SMTP_PW/" includes/env.yml
      - sed -i "s,cdn-url,$CDN_URL," includes/env.yml
      - sed -i "s,uploads-bucket,$S3_UPLOADS," includes/env.yml
      - sed -i "s,s3-region,$S3_REGION," includes/env.yml
      - sed -i "s,reply-by-email-address,replies+%{reply_key}@$D_HOSTNAME," includes/env.yml
      - sed -i "s,notification-email,notifications@$D_HOSTNAME," includes/env.yml

  build:
    commands:
      - ./launcher bootstrap app
      - cd ..
  post_build:
    commands:
      - $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
      - export DOCKER_REVISION=`echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7`-`date +%s`
      - echo $DOCKER_REVISION
      - docker tag local_discourse/app:latest "$ECR:$DOCKER_REVISION"
      - docker push "$ECR:$DOCKER_REVISION"
      - linux-amd64/helm template -f "k8s/values/$ENV.yaml" --set docker_registry="$ECR",revision="$DOCKER_REVISION" k8s/ | kubectl apply -f -
